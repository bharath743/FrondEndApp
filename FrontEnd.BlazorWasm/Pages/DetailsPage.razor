@inject IJSRuntime jsInterop
@inject IServerService server

<TelerikWindow Class="demo-window" Width="600px" Height="500px" Centered="true" @bind-Visible=@WindowVisible Modal="true">
    <WindowTitle>
        <strong>Details of Product <b>@Value.firmatario</b></strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
    <WindowContent>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">dataIntervento</th>
                    <th scope="col">firmatario</th>
                    <th scope="col">luogoIntervento</th>
                    <th scope="col">statoFattura</th>
                    <th scope="col">Vabel</th>
                    <th scope="col">Content</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody>
                @if (detail is null)
                {
                    <tr>Loading...</tr>
                }
                else
                {
                    @foreach (var item in detail)
                    {
                        <tr>
                            <td>#</td>
                            <td>@Value.dataIntervento</td>
                            <td>@Value.firmatario</td>
                            <td>@Value.luogoIntervento</td>
                            <td>@Value.statoFattura</td>
                            <td>@item.label</td>
                            <td>@item.Content</td>
                            <td>
                                <button class="btn btn-secondary" @onclick="(()=>Download(item.IdFile))">Download file</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </WindowContent>
</TelerikWindow>

@code {
    [Parameter]
    public bool WindowVisible { get; set; } = false;

    //[Parameter]
    //public Products Products { get; set; } = default!;
    [Parameter]
    public Value Value { get; set; } = default!;

    IEnumerable<DetailData> detail = default!;

    protected override async Task OnParametersSetAsync()
    {
        var token = await jsInterop.InvokeAsync<string>("getData", "token");
        if (!string.IsNullOrWhiteSpace(token))
        {
            if (Value is not null)
            {
                var data = await server.GetProductsDetailsAsync(token, Value?.RowID);
                if (data is not null)
                {
                    if (data.Status == "SUCCESS")
                    {
                        detail = new List<DetailData>(data.Data.Value);
                    }
                }
            }
        }
    }

    async void Download(string id)
    {
        var token = await jsInterop.InvokeAsync<string>("getData", "token");
        if (!string.IsNullOrWhiteSpace(token))
        {
            var downloaded = await server.DownloadProceess(token, id);
        }
    }

}
